[33mcommit 4d5c9cbcb57cf0afee2dd7201233ebbff9ef9798[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: Bhangle <signups@adityabhangle.com>
Date:   Wed May 4 16:05:26 2022 +0530

    First Commit

[1mdiff --git a/basics.py b/basics.py[m
[1mnew file mode 100644[m
[1mindex 0000000..5d1c682[m
[1m--- /dev/null[m
[1m+++ b/basics.py[m
[36m@@ -0,0 +1,199 @@[m
[32m+[m[32m#---------------------------Lecture 1, Basics[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# class Employee:  #class[m
[32m+[m[32m#     pass[m
[32m+[m
[32m+[m[32m# # instance of a class[m
[32m+[m[32m# emp_1 = Employee()[m[41m  [m
[32m+[m[32m# emp_2 = Employee()[m
[32m+[m
[32m+[m
[32m+[m[32m# print(emp_1)[m
[32m+[m[32m# print(emp_2)[m
[32m+[m
[32m+[m[32m# emp_1.first = "Leo"[m
[32m+[m[32m# emp_1.last = "Valdez"[m
[32m+[m[32m# emp_1.email = "LeoValdez@gmail.com"[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# emp_2.first = "James"[m
[32m+[m[32m# emp_2.last = "Holden"[m
[32m+[m[32m# emp_2.email = "JamesHolden@gmail.com"[m
[32m+[m
[32m+[m[32m# print(emp_1.email)[m
[32m+[m[32m# print(emp_2.email)[m
[32m+[m
[32m+[m
[32m+[m[32m# instead on using this long method use a constructor[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# class Employeee: #Class Declaration[m
[32m+[m[41m    [m
[32m+[m[32m#     def __init__ (self, first, last, salary): #constructor[m
[32m+[m[32m#         self.first = first[m
[32m+[m[32m#         self.last = last       #instance variable[m
[32m+[m[32m#         self.salary = salary[m
[32m+[m[32m#         self.email = first + "." + last + "@company.com"[m
[32m+[m[41m        [m
[32m+[m[32m#     def fullname(self):  #method[m
[32m+[m[32m#             return '{} {}'.format(self.first, self.last)[m
[32m+[m[41m        [m
[32m+[m[32m# emp1 = Employeee("Leo", "Valdez", 50000)  #instances[m
[32m+[m[32m# emp2 = Employeee("James", "Holden", 40000)[m[41m  [m
[32m+[m
[32m+[m[32m# print(emp1.email)[m
[32m+[m[32m# print(emp2.email)[m[41m [m
[32m+[m[32m# print(emp1.fullname())[m[41m [m
[32m+[m
[32m+[m[32m# print(Employeee.fullname(emp2))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#-------------------Lecture 2, Class Variables[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# class Employeee: #Class Declaration (class name)[m
[32m+[m
[32m+[m
[32m+[m[32m#     raiseamount = 1.04  #Class Variable[m
[32m+[m[41m    [m
[32m+[m[32m#     # We can access class variable using (class name. class variable), Employeee.raiseamount[m
[32m+[m[32m#     # or (self.class variable), self.raiseamount, using self is way more beneficial as we can change the of a particular instance in the future as well[m
[32m+[m[32m#     # as the instances dont have that variable itself and are accessing classes variable[m
[32m+[m[41m    [m
[32m+[m[32m#     #IF WE DONT WANT TO CHANGE THE VALUE OF A CLASS VARIABLE FOR ANY INSTANCE USE CLASSNAME.CLASSVARIABLE INSTEAD (Employeee.raiseamount)[m
[32m+[m
[32m+[m[41m   [m
[32m+[m[32m#     def __init__ (self, first, last, salary): #constructor[m
[32m+[m[32m#         self.first = first[m
[32m+[m[32m#         self.last = last       #instance variable[m
[32m+[m[32m#         self.salary = salary[m
[32m+[m[32m#         self.email = first + "." + last + "@company.com"[m
[32m+[m[41m        [m
[32m+[m[32m#     def fullname(self):  #method[m
[32m+[m[32m#             return '{} {}'.format(self.first, self.last)[m
[32m+[m[41m        [m
[32m+[m[32m#     def applyraise(self):[m
[32m+[m[32m#             self.salary = int(self.salary * self.raiseamount)[m[41m   [m
[32m+[m[41m        [m
[32m+[m[32m# emp1 = Employeee("Leo", "Valdez", 50000)  #instances[m
[32m+[m[32m# emp2 = Employeee("James", "Holden", 50000)[m[41m  [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# #we can change the raise amount as well[m
[32m+[m
[32m+[m[32m# Employeee.raiseamount = 1.05[m[41m  [m
[32m+[m
[32m+[m[32m# # #Inreasing the raise amount by using Employeee will affect every instance as it is a class varibale and not an instance variable[m
[32m+[m
[32m+[m
[32m+[m[32m# # #for uncreasing the raise amount of a particular instance, we cam increase it using (instance name.raiseamount = )[m[41m [m
[32m+[m
[32m+[m[32m# emp2.raiseamount = 1.06[m
[32m+[m
[32m+[m[32m# print(emp1.salary)[m
[32m+[m[32m# emp1.applyraise()[m
[32m+[m[32m# print(emp1.salary)[m
[32m+[m
[32m+[m[32m# print(emp2.salary)[m
[32m+[m[32m# emp2.applyraise()[m
[32m+[m[32m# print(emp2.salary)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# --------------------------- Class Methods and Static methods[m
[32m+[m
[32m+[m
[32m+[m[32mclass Employeee:[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m    raiseamount = 1.04[m
[32m+[m
[32m+[m
[32m+[m[32m    def __init__ (self, first, last, salary): #constructor[m
[32m+[m[32m        self.first = first[m
[32m+[m[32m        self.last = last       #instance variable[m
[32m+[m[32m        self.salary = salary[m
[32m+[m[32m        self.email = first + "." + last + "@company.com"[m
[32m+[m[41m        [m
[32m+[m[32m    def fullname(self):  #method[m
[32m+[m[32m            return '{} {}'.format(self.first, self.last)[m
[32m+[m[41m        [m
[32m+[m[32m    def applyraise(self):[m
[32m+[m[32m            self.salary = int(self.salary * self.raiseamount)[m[41m [m
[32m+[m
[32m+[m[32m    @classmethod        #class method[m
[32m+[m[32m    def apply_raise(cls, amt):[m
[32m+[m[32m        cls.raiseamount = amt[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m# when we use methods inside a class they always take self as an argument refering to the instances[m[41m [m
[32m+[m[32m# but if we want to apply a fucntion on the entire class we cant use the normal methods cuz they are used for instances[m
[32m+[m[32m# so for entire classes we use classmethods[m
[32m+[m
[32m+[m[32m    @classmethod                                # we used classmethod as a constructor as we did the same job without using the constructor[m[41m [m
[32m+[m[32m    def fromstringtoname(cls, emp):[m
[32m+[m[32m       first, last, salary = emp.split("-")[m[41m [m
[32m+[m[32m       return cls(first, last, salary)[m
[32m+[m
[32m+[m[32m# if we want to use methods that arent related to instances and doesnt require the class name, (we dont need to pass self or cls), then use static methods[m
[32m+[m
[32m+[m[32m    @staticmethod[m
[32m+[m[32m    def addition(a,b):[m
[32m+[m[32m        print(a+b)[m[41m [m
[32m+[m
[32m+[m[32memp1 = Employeee("Leo", "Valdez", 50000)  #instances[m
[32m+[m[32memp2 = Employeee("James", "Holden", 50000)[m
[32m+[m
[32m+[m[32m# print(emp1.salary)[m
[32m+[m
[32m+[m[32m# emp1.applyraise()[m[41m [m
[32m+[m[32m# print(emp1.raiseamount)[m
[32m+[m
[32m+[m[32m# Employeee.apply_raise(1.05)[m
[32m+[m
[32m+[m
[32m+[m[32m# print(emp1.raiseamount)[m
[32m+[m[32m# print(emp2.raiseamount)[m[41m [m
[32m+[m[32m# print(emp1.salary)[m
[32m+[m
[32m+[m
[32m+[m[32m# now consider we are getting a string that has "-" in it, for eg, Leo-Valdez-50000, we want to add this name to the database[m[41m [m
[32m+[m[32m# we can remove the "-" by using class method so we wont have to do it at every name[m
[32m+[m
[32m+[m
[32m+[m[32memplo1 = 'Tris-Prior-60000'[m
[32m+[m[32memplo2 = 'Joe-Miller-60000'[m
[32m+[m[32memplo3 = 'Ann-Chase-70000'[m
[32m+[m
[32m+[m[32mnewemployee = Employeee.fromstringtoname(emplo3)[m
[32m+[m[32mEmployeee.addition(5,6)[m
[32m+[m[32mprint(newemployee.first)[m
\ No newline at end of file[m
